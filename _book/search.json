[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pytorch_quickstart",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "quickstart.html#working-with-data",
    "href": "quickstart.html#working-with-data",
    "title": "2  QuickStart",
    "section": "2.1 Working with data",
    "text": "2.1 Working with data\nPyTorch has two primitives to work with data: torch.utils.data.DataLoader and torch.utils.data.Dataset. Dataset stores the samples and their corresponding labels, and DataLoader wraps an iterable around the Dataset.\n\nimport torch\nfrom torch import nn\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets\nfrom torchvision.transforms import ToTensor\n\nprint('pytorch version:', torch.__version__)\n\npytorch version: 2.0.1+cu118\n\n\nPyTorch offers domain-specific libraries such as TorchText, TorchVision, and TorchAudio, all of which include datasets. For this tutorial, we will be using a TorchVision dataset.\nThe torchvision.datasets module contains Dataset objects for many real-world vision data like CIFAR, COCO (full list here). In this tutorial, we use the FashionMNIST dataset. Every TorchVision Dataset includes two arguments: transform and target_transform to modify the samples and labels respectively.\n\n# Download training data from open datasets.\ntraining_data = datasets.FashionMNIST(\n    root=\"data\", \n    train=True,\n    download=True,\n    transform=ToTensor(),\n)\n\n# Download test data from open datasets.\ntest_data = datasets.FashionMNIST(\n    root=\"data\",\n    train=False,\n    download=True,\n    transform=ToTensor(),\n)\n\nDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz\n\n\nDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to data\\FashionMNIST\\raw\\train-images-idx3-ubyte.gz\n\n\n  0%|          | 0/26421880 [00:00&lt;?, ?it/s]\n\n\n  0%|          | 32768/26421880 [00:00&lt;02:36, 168163.62it/s]\n\n\n  0%|          | 65536/26421880 [00:00&lt;02:04, 211462.51it/s]\n\n\n  0%|          | 131072/26421880 [00:00&lt;01:27, 300023.60it/s]\n\n\n  1%|          | 229376/26421880 [00:00&lt;01:02, 417797.94it/s]\n\n\n  2%|▏         | 458752/26421880 [00:00&lt;00:33, 765646.94it/s]\n\n\n  4%|▎         | 950272/26421880 [00:01&lt;00:17, 1474611.38it/s]\n\n\n  6%|▌         | 1474560/26421880 [00:01&lt;00:12, 1978227.28it/s]\n\n\n 10%|▉         | 2523136/26421880 [00:01&lt;00:07, 3338479.15it/s]\n\n\n 16%|█▌        | 4292608/26421880 [00:01&lt;00:03, 6377123.50it/s]\n\n\n 19%|█▉        | 5079040/26421880 [00:01&lt;00:03, 5663013.38it/s]\n\n\n 27%|██▋       | 7208960/26421880 [00:01&lt;00:02, 9031539.15it/s]\n\n\n 32%|███▏      | 8323072/26421880 [00:01&lt;00:02, 8830601.84it/s]\n\n\n 36%|███▌      | 9502720/26421880 [00:02&lt;00:02, 6600526.91it/s]\n\n\n 47%|████▋     | 12550144/26421880 [00:02&lt;00:01, 11069960.65it/s]\n\n\n 53%|█████▎    | 14024704/26421880 [00:02&lt;00:01, 11677674.60it/s]\n\n\n 60%|██████    | 15958016/26421880 [00:02&lt;00:00, 12439426.27it/s]\n\n\n 66%|██████▌   | 17432576/26421880 [00:02&lt;00:00, 12598126.43it/s]\n\n\n 72%|███████▏  | 18972672/26421880 [00:02&lt;00:00, 13205248.64it/s]\n\n\n 77%|███████▋  | 20414464/26421880 [00:02&lt;00:00, 13459751.98it/s]\n\n\n 87%|████████▋ | 22872064/26421880 [00:03&lt;00:00, 11423436.40it/s]\n\n\n 96%|█████████▌| 25329664/26421880 [00:03&lt;00:00, 14180488.12it/s]\n\n\n100%|██████████| 26421880/26421880 [00:03&lt;00:00, 7839765.54it/s] \n\n\n\n\n\nExtracting data\\FashionMNIST\\raw\\train-images-idx3-ubyte.gz to data\\FashionMNIST\\raw\n\n\n\nDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz\n\n\nDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to data\\FashionMNIST\\raw\\train-labels-idx1-ubyte.gz\n\n\n  0%|          | 0/29515 [00:00&lt;?, ?it/s]\n\n\n100%|██████████| 29515/29515 [00:00&lt;00:00, 184629.32it/s]\n\n\n100%|██████████| 29515/29515 [00:00&lt;00:00, 182289.35it/s]\n\n\n\n\n\nExtracting data\\FashionMNIST\\raw\\train-labels-idx1-ubyte.gz to data\\FashionMNIST\\raw\n\nDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz\n\n\nDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to data\\FashionMNIST\\raw\\t10k-images-idx3-ubyte.gz\n\n\n  0%|          | 0/4422102 [00:00&lt;?, ?it/s]\n\n\n  1%|          | 32768/4422102 [00:00&lt;00:21, 206760.00it/s]\n\n\n  1%|▏         | 65536/4422102 [00:00&lt;00:21, 204845.75it/s]\n\n\n  3%|▎         | 131072/4422102 [00:00&lt;00:14, 297461.86it/s]\n\n\n  5%|▌         | 229376/4422102 [00:00&lt;00:09, 421070.86it/s]\n\n\n 11%|█         | 491520/4422102 [00:00&lt;00:04, 855422.86it/s]\n\n\n 21%|██▏       | 950272/4422102 [00:00&lt;00:02, 1534269.17it/s]\n\n\n 44%|████▎     | 1933312/4422102 [00:01&lt;00:00, 3020922.62it/s]\n\n\n 63%|██████▎   | 2785280/4422102 [00:01&lt;00:00, 4245189.32it/s]\n\n\n 81%|████████  | 3571712/4422102 [00:01&lt;00:00, 5095706.63it/s]\n\n\n100%|██████████| 4422102/4422102 [00:01&lt;00:00, 3248750.58it/s]\n\n\n\n\n\nExtracting data\\FashionMNIST\\raw\\t10k-images-idx3-ubyte.gz to data\\FashionMNIST\\raw\n\nDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz\n\n\nDownloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to data\\FashionMNIST\\raw\\t10k-labels-idx1-ubyte.gz\n\n\n  0%|          | 0/5148 [00:00&lt;?, ?it/s]\n\n\n100%|██████████| 5148/5148 [00:00&lt;00:00, 5139794.57it/s]\n\n\nExtracting data\\FashionMNIST\\raw\\t10k-labels-idx1-ubyte.gz to data\\FashionMNIST\\raw\n\n\n\n\n\n\nWe pass the Dataset as an argument to DataLoader. This wraps an iterable over our dataset, and supports automatic batching, sampling, shuffling and multiprocess data loading. Here we define a batch size of 64, i.e. each element in the dataloader iterable will return a batch of 64 features and labels.\n\nbatch_size = 64\n\n# Create data loaders.\ntrain_dataloader = DataLoader(training_data, batch_size=batch_size)\ntest_dataloader = DataLoader(test_data, batch_size=batch_size)\n\nfor X, y in test_dataloader:\n    print(f\"Shape of X [N, C, H, W]: {X.shape}\")\n    print(f\"Shape of y: {y.shape} {y.dtype}\")\n    break\n\nShape of X [N, C, H, W]: torch.Size([64, 1, 28, 28])\nShape of y: torch.Size([64]) torch.int64\n\n\nread more about loading data in pytorch."
  },
  {
    "objectID": "quickstart.html#creating-models",
    "href": "quickstart.html#creating-models",
    "title": "2  QuickStart",
    "section": "2.2 Creating Models",
    "text": "2.2 Creating Models\nTo define a neural network in PyTorch, we create a class that inherits from nn.Module. We define the layers of the network in the init function and specify how data will pass through the network in the forward function. To accelerate operations in the neural network, we move it to the GPU or MPS if available.\n\n# Get cpu, gpu or mps device for training.\ndevice = (\n    \"cuda\"\n    if torch.cuda.is_available()\n    else \"mps\"\n    if torch.backends.mps.is_available()\n    else \"cpu\"\n)\nprint(f\"Using {device} device\")\n\n# Define model\nclass NeuralNetwork(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.flatten = nn.Flatten()\n        self.linear_relu_stack = nn.Sequential(\n            nn.Linear(28*28, 512),\n            nn.ReLU(),\n            nn.Linear(512, 512),\n            nn.ReLU(),\n            nn.Linear(512, 10)\n        )\n\n    def forward(self, x):\n        x = self.flatten(x)\n        logits = self.linear_relu_stack(x)\n        return logits\n\nmodel = NeuralNetwork().to(device)\nprint(model)\n\nUsing cuda device\nNeuralNetwork(\n  (flatten): Flatten(start_dim=1, end_dim=-1)\n  (linear_relu_stack): Sequential(\n    (0): Linear(in_features=784, out_features=512, bias=True)\n    (1): ReLU()\n    (2): Linear(in_features=512, out_features=512, bias=True)\n    (3): ReLU()\n    (4): Linear(in_features=512, out_features=10, bias=True)\n  )\n)\n\n\nRead more about building neural networks in PyTorch."
  },
  {
    "objectID": "quickstart.html#optimizing-the-model-parameters",
    "href": "quickstart.html#optimizing-the-model-parameters",
    "title": "2  QuickStart",
    "section": "2.3 Optimizing the Model Parameters",
    "text": "2.3 Optimizing the Model Parameters\nTo train a model, we need a loss function and an optimizer.\n\nloss_fn = nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=1e-3)\n\nIn a single training loop, the model makes predictions on the training dataset (fed to it in batches), and backpropagates the prediction error to adjust the model’s parameters.\n\ndef train(dataloader, model, loss_fn, optimizer):\n    size = len(dataloader.dataset)\n    model.train()\n    for batch, (X, y) in enumerate(dataloader):\n        X, y = X.to(device), y.to(device)\n\n        # Compute prediction error\n        pred = model(X)\n        loss = loss_fn(pred, y)\n\n        # Backpropagation\n        loss.backward()\n        optimizer.step()\n        optimizer.zero_grad()\n\n        if batch % 100 == 0:\n            loss, current = loss.item(), (batch + 1) * len(X)\n            print(f\"loss: {loss:&gt;7f}  [{current:&gt;5d}/{size:&gt;5d}]\")\n\nWe also check the model’s performance against the test dataset to ensure it is learning.\n\ndef test(dataloader, model, loss_fn):\n    size = len(dataloader.dataset)\n    num_batches = len(dataloader)\n    model.eval()\n    test_loss, correct = 0, 0\n    with torch.no_grad():\n        for X, y in dataloader:\n            X, y = X.to(device), y.to(device)\n            pred = model(X)\n            test_loss += loss_fn(pred, y).item()\n            correct += (pred.argmax(1) == y).type(torch.float).sum().item()\n    test_loss /= num_batches\n    correct /= size\n    print(f\"Test Error: \\n Accuracy: {(100*correct):&gt;0.1f}%, Avg loss: {test_loss:&gt;8f} \\n\")\n\nThe training process is conducted over several iterations (epochs). During each epoch, the model learns parameters to make better predictions. We print the model’s accuracy and loss at each epoch; we’d like to see the accuracy increase and the loss decrease with every epoch.\n\nimport time\n\n# get the start time\nst = time.time()\n\n# running training\nepochs = 2\nfor t in range(epochs):\n    print(f\"Epoch {t+1}\\n-------------------------------\")\n    train(train_dataloader, model, loss_fn, optimizer)\n    test(test_dataloader, model, loss_fn)\nprint(\"Done!\")\n\n# get the end time\net = time.time()\n\n# get the time difference\nelapsed_time = et - st\nprint(f\"Elapsed time: {elapsed_time:.2f} seconds\")\n\nEpoch 1\n-------------------------------\n\n\nloss: 2.304549  [   64/60000]\n\n\nloss: 2.289893  [ 6464/60000]\n\n\nloss: 2.264527  [12864/60000]\n\n\nloss: 2.259615  [19264/60000]\n\n\nloss: 2.254302  [25664/60000]\n\n\nloss: 2.214675  [32064/60000]\n\n\nloss: 2.231343  [38464/60000]\n\n\nloss: 2.197631  [44864/60000]\n\n\nloss: 2.194943  [51264/60000]\n\n\nloss: 2.153336  [57664/60000]\n\n\nTest Error: \n Accuracy: 33.9%, Avg loss: 2.152217 \n\nEpoch 2\n-------------------------------\nloss: 2.165599  [   64/60000]\n\n\nloss: 2.156705  [ 6464/60000]\n\n\nloss: 2.095088  [12864/60000]\n\n\nloss: 2.108886  [19264/60000]\n\n\nloss: 2.064809  [25664/60000]\n\n\nloss: 2.003215  [32064/60000]\n\n\nloss: 2.031761  [38464/60000]\n\n\nloss: 1.956279  [44864/60000]\n\n\nloss: 1.962331  [51264/60000]\n\n\nloss: 1.876765  [57664/60000]\n\n\nTest Error: \n Accuracy: 50.3%, Avg loss: 1.881936 \n\nDone!\nElapsed time: 26.68 seconds"
  }
]